# Created by Osareme Davis

import math

# these dictionaries store the key values so the code for the tests looks a little prettier
public = {"n": 0x00c3a523e36179461200b0545109ad0ff5bc6956ea79dd6b5ac3bce126e4c26e769d40073ef37f2f27bbb8efd9bc9c99a4b2cc47bdeb88683d1f608325cabd36c5dec952795736d103a054faeb4e5fac729f0e2d75218333d13ae43e4ada97fb96418296cc828b8c725cb0132098e6840ea4c45b4a927e49da35038c95931444a6c89527ed667b1631e419eb2228eec913cc781ae083773606cff11359ffba295b4da863ab24170f7563845db81cc175ddca538456eb56fa3eaa3ef163cec4a34f4674709ae2ecbff38f647295a316e7de6ab3208b8a25ce2b3ac06d02f427eee92f26abfc3b8a32c15b28ff40f7fea78fac04d654628aee243601ae9ec427e1a731e48a31acb1a692b86ccbb0a3a8cffb89cba322f577905e014ff608575ebcc194778b9785aaad2e89939c2ccadee5c0a4eab1bd504df5daf7069796e2bb7f4a0d1a3213ef87c1a2ef97baba46bc466485cccfc8855b2092481d3a67f0d0804b3ca2a019da366263ef848f76a79ceca2b8fa6aa88ccf8edd342df86c11424057,
"e":0x010001}
private = {"n":0x00c3a523e36179461200b0545109ad0ff5bc6956ea79dd6b5ac3bce126e4c26e769d40073ef37f2f27bbb8efd9bc9c99a4b2cc47bdeb88683d1f608325cabd36c5dec952795736d103a054faeb4e5fac729f0e2d75218333d13ae43e4ada97fb96418296cc828b8c725cb0132098e6840ea4c45b4a927e49da35038c95931444a6c89527ed667b1631e419eb2228eec913cc781ae083773606cff11359ffba295b4da863ab24170f7563845db81cc175ddca538456eb56fa3eaa3ef163cec4a34f4674709ae2ecbff38f647295a316e7de6ab3208b8a25ce2b3ac06d02f427eee92f26abfc3b8a32c15b28ff40f7fea78fac04d654628aee243601ae9ec427e1a731e48a31acb1a692b86ccbb0a3a8cffb89cba322f577905e014ff608575ebcc194778b9785aaad2e89939c2ccadee5c0a4eab1bd504df5daf7069796e2bb7f4a0d1a3213ef87c1a2ef97baba46bc466485cccfc8855b2092481d3a67f0d0804b3ca2a019da366263ef848f76a79ceca2b8fa6aa88ccf8edd342df86c11424057,
"e":0x010001,
"d":0x583b1be5b9fa3ab6f8b78cb6e531b68e6073731e9869da35db2b4db0c01ecd3951ee63b62892d57dca437b6b8b0b66a0e77f87e52718e3c598e66a0ebb913c67dcf296eea0fdd8221606ed07fc56da4af0df3071eff49f043f565a9f6058853dfc7a3baeac3ae9d25369969eaf45da0d4e923d0772ec603af7888bb892d563a681b3fe872a1ddd630f96febaef91cc7dd0cae37817e1c5ac29cff325b5d5cb3be1584ce68c0698529cd83f79be0223392c3b20e62009201eeda12834963588ddf821e70b051032036e408090579549f983ae3239ece79056ffb3906a325ef28dfa9287cc07d69bdfa5c322cbe88535acbccf3cf3c351086adea248b100710bf3b8ab542b70550ceb91ec1002dd9d27791372ab5751ab465dcbf700a541f35b7b90493e9bf4c2a5ebcbe42ea5db26070bb7296413477e9055dc59304c94ffef2c167c7fd809035b1dc212342fa41fb313ba243ace8a1962cc05687954b209093f3b5217339252817abac4b8c1a8d090af212d7abf349cb5f11910daa1111b8c9d,
"p":0x00e55632f7fd1430989807a8eeb7aefc953e3bd0020579622b2ae2ab32243c89d6aa551b9102623415ebd10155f5e48ddeb46493bc446fb7669b333ac749218d961f8bd7853a0f9e7bc7c321f80bd3c826344807d812721f6df6061d3dda58857609ba2efeb64a34582b2f245876b259c60ad44fe3ab7729e3215add18029e374627725982a83912e2a210c681e2d76ab43b1d24b117a16c29e036e9e9fabfba24aa4c472e3013fa4c6887e7df343c44921a38418a33d7850b21ca8b2b521a75fb,
"q":0x00da642b538340ab136f9646dcb62a74933422582be034b08259b82c501f8ed87364e8b00655d574b6889feaf97bc343f29c220c75714ec88c3725f5633484af8da25438a430597f203b291eba553fed87b9e57a05ed44670cbcc258d7c52ccccbd3df30d61f71c5aab848906d9ff39ee0672378e7f3cf1153bbbefa4ffcbb7e6fb1cd42f3281ac8fc8463f8bae25e65a05a35529b1bc4f2ceac240385e10dfca2745fb052f6a5875872ddc570d4ff39c868b44faedb1162e2c8d226cb9522fc55}

# need to calculate lambda n for some of the tests
lambdaN = math.lcm(private["p"] - 1, private["q"] - 1)

# check that e*d mod lambda n = 1
print("should be 1: ", public["e"] * private["d"] % lambdaN)

# check that e is less than lambda n
print("should be true: ", public["e"] < lambdaN)

# check that e and lambda n are relatively prime
print("should be 1: ", math.gcd(public["e"], lambdaN))

# check that p * q = n
print("should be true: ", private["p"] * private["q"] == public["n"])

# check that we can encrypt/decrypt easy
# this test commented out because it takes a LONG time to run
# print("should be 60: ", (60**public["e"] % public["n"])**private["d"] % private["n"])
